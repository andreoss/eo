# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+package org.eolang
+home https://github.com/objectionary/eo
+version 0.0.0
+rt jvm org.eolang:eo-runtime:0.0.0

[] > array

  # Is it empty?
  [] > is-empty
    eq. > @
      ^.length
      0

  # Obtain the length of the array.
  [] > length /int

  # Take one element from the array, at the
  # given position.
  [i] > at /?

  # Create a new array with this element added to
  # the end of it.
  [x] > with /array

  # Create a new array without the i-th element
  [i] > without
    ^.reducei > @
      *
      [a idx item]
        if. > @
          idx.eq i
          a
          a.with item

  # Reduce with index from start "a" using the function "f".
  # Here "f" must be an abstract
  # object with three free attributes. The first
  # one for the accumulator, the second one
  # for the index and the third one for the element
  # of the array.
  [a f] > reducei
    func a f ^ > @

    [ac fn arr] > func
      memory 0 > idx
      memory 0 > acc
      seq > @
        idx.write 0
        acc.write ac
        while.
          lt.
            idx
            arr.length
          [i]
            seq > @
              idx.write (i.plus 1)
              acc.write
                fn
                  acc
                  i
                  arr.at i
        acc

  # Reduce from start "a" using the function "f"
  [a f] > reduce
    ^.reducei > @
      a
      [a idx item]
        &.f > @
          a
          item

  # For each array element dataize the object
  [f] > each /bool

  # Map with index. Here "f" must be an abstract
  # object with two free attributes. The first
  # one for the element of the array, the second one
  # for the index.
  [f] > mapi
    ^.reducei > @
      *
      [a idx item]
        with. > @
          a
          &.f item idx

  # Map without index. Here "f" must be an abstract
  # object with one free attribute, for the element
  # of the array.
  [f] > map
    ^.mapi > @
      [x idx]
        &.f x > @

  # Equal to another object?
  [x] > eq
    if. > @
      eq.
        ^.length
        x.length
      ^.reducei
        TRUE
        [a idx item]
          and. > @
            a
            eq.
              item
              x.at idx
      FALSE
