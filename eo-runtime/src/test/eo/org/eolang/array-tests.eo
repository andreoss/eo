# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+package org.eolang
+home https://github.com/objectionary/eo
+version 0.0.0
+alias org.eolang.txt.sprintf
+alias org.eolang.txt.sscanf
+alias org.eolang.txt.text
+alias org.eolang.io.stdout
+alias org.eolang.math.number
+alias org.eolang.hamcrest.assert-that
+junit

[] > makes-array-through-special-syntax
  assert-that > @
    (* 1 2).length
    $.equal-to 2

[] > gets-lengths-of-empty-array-through-special-syntax
  assert-that > @
    *.length
    $.equal-to 0

[] > iterates-with-each
  *
    "one"
    "two"
    "three"
  .each > @
    [i] (stdout i > @)

[] > simple-mapping-int-to-string
  assert-that > @
    length.
      map.
        * 1 2 3
        [i]
          (number i).as-string > @
    $.equal-to 3

[] > using-map-as-object
  assert-that > @
    (text " ").joined
      map.
        * 1 2
        [i]
          (number i).as-string > @
    $.equal-to "1 2"

# check that an empty array's .length equals to zero
[] > empty-array-length
  [elements...] > arr
  assert-that > @
    (arr).elements.length
    $.equal-to 0

# check that array.length works properly for non-empty arrays
[] > non-empty-array-length-test
  [elements...] > arr
  assert-that > @
    (arr "a" "b" "c" "d" "e").elements.length
    $.equal-to 5

# if map does mutate arrays, then this test would fail
# because of the absence of the as-int attribute
# that is caused by mutation of the original string array
# to an int array
[] > map-does-dot-mutate-array
  [numbers...] > squares
    map. > @
      numbers
      [current]
        pow. > @
          number
            (sscanf "%d" current).at 0
          2
  (squares "1" "2" "3") > sq
  assert-that > @
    sprintf "%d %d %d" (sq.at 0) (sq.at 1) (sq.at 2)
    $.equal-to
      sprintf "%d %d %d" 1 4 9

# this test performs mapping of array using the index for it
[] > mapi-index-can-be-accessed
  [numbers...] > multipliedByNaturalSequence
    mapi. > @
      numbers
      [current index]
        times. > @
          (sscanf "%d" current).at 0
          index.plus 1
  (multipliedByNaturalSequence "1" "2" "3") > mulSeq
  assert-that > @
    sprintf "%d %d %d" (mulSeq.at 0) (mulSeq.at 1) (mulSeq.at 2)
    $.equal-to
      sprintf "%d %d %d" 1 4 9

[] > array-as-a-bound-attribute-size-0
  * > anArray
  assert-that > @
    anArray.length
    $.equal-to 0

[] > array-as-a-bound-attribute-size-1
  * > anArray
    100
  assert-that > @
    anArray.at 0
    $.equal-to 100

[] > array-as-a-bound-attribute-size-2
  * > anArray
    1
    2
  assert-that > @
    anArray
    $.array-each
      $.equal-to 1
      $.equal-to 2

# check that array.is-empty works properly
[] > should-not-be-empty
  * > xs
    1
    2
  assert-that > @
    xs.is-empty.not
    $.equal-to TRUE

# check that array.is-empty works properly
[] > should-be-empty
  * > xs
  assert-that > @
    xs.is-empty
    $.equal-to TRUE

# arrays of objects
[] > should-not-be-empty-with-3-objects
  [x] > a-1
    ((number x).as-int > @)
  [x] > a-2
    (x.as-byte > @)
  [x] > a-3
    ((number x).as-string > @)
  * > xs
    a-1
    a-2
    a-3
  assert-that > @
    xs.is-empty.not
    $.equal-to TRUE

# arrays with anonymous object
[] > should-not-be-empty-with-1-anon-object
  * > xs
    [f]
      (number f).as-int > @
  assert-that > @
    xs.is-empty.not
    $.equal-to TRUE

# arrays with anonymous one-line-object
[] > should-not-be-empty-with-1-anon-object-one-liner
  * > xs
    [f] ((number f).as-int > @)
  assert-that > @
    xs.is-empty.not
    $.equal-to TRUE

# array equal to another array
[] > array-equal-to-another-array
  assert-that > @
    *
      1
      "str"
      "\n"
      22.0
      "друг".as-bytes
      TRUE
    $.is
      $.equal-to
        *
          1
          "str"
          "\n"
          (number (11.times 2)).as-float
          D0-B4-D1-80-D1-83-D0-B3
          FALSE.not

# array not equal to another object by length
[] > array-not-equal-to-another-array-by-length
  assert-that > @
    * 1 2 3
    $.is
      $.not
        $.equal-to
          * 1 2 3 4

# check that varargs eq works
[] > varargs-eq-should-works
  [args...] > a
  [args...] > b
  assert-that > @
    args.
      a
        (number 13).as-float
        "\t"
        "bbt"
    $.equal-to
      args.
        b
          (number 13).as-float
          "\t"
          "bbt"

# nested array equal object should works
[] > nested-array-eq-should-works
  * 1 "2" 3.0 > a
  * 1 "2" ((number 3).as-float) > b
  assert-that > @
    * "w" a
    $.equal-to
      * "w" b

# two different arrays not equal
[] > two-different-arrays-not-equal
  assert-that > @
    * 1 2 3
    $.not
      $.equal-to
        * 1 5 "text"

#two different nested arrays not eq
[] > nested-array-not-eq-should-works
  * 5 "\07" "18" > a
  * 5 "neq" ((number 18).as-string) > b
  assert-that > @
    * "not eq" a
    $.not
      $.equal-to
        * "not eq" b

# check that varargs not eq works
[] > varargs-not-eq-should-works
  [args...] > a
  [args...] > b
  assert-that > @
    args.
      a 1 2 3
    $.not
      $.equal-to
        args.
          b 1 2 "fail"

# reduce with index test
[] > reduce-with-index-test
  * 2 2 > src
  assert-that > @
    reducei.
      * 1 1
      0
      [a i x]
        plus. > @
          x
          a.plus
            src.at i
    $.equal-to 6

[] > reducei-long-int-array
  assert-that > @
    reducei.
      * 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
      0
      [a i x]
        plus. > @
          x
          a
    $.equal-to 435

[] > reducei-bools-array
  assert-that > @
    reducei.
      * TRUE TRUE FALSE
      TRUE
      [a i x]
        and. > @
          x
          a
    $.equal-to FALSE

[] > reducei-nested-functions
  [] > a
    10 > @
  [] > b
    500 > @
  assert-that > @
    reducei.
      * a b
      0
      [acc i x]
        check x > @
        [el] > check
          if. > @
            x.lt 100
            acc.plus x
            acc.minus x
    $.equal-to
      plus.
        0.minus 500
        10

# reduce without index test
[] > reduce-without-index-test
  assert-that > @
    reduce.
      * 1 2 3 4
      -1
      [a x]
        times. > @
          a
          x
    $.equal-to -24

[] > array-with-in-seq
  [a] > foo
    seq > @
      a.with "hi" > t
      t
  seq > @
    foo
      * 1 2 3
    TRUE

[] > array-with
  assert-that > @
    with.
      * 1 2 3
      "with"
    $.equal-to
      * 1 2 3 "with"

[] > array-without
  assert-that > @
    without.
      * 1 2 3
      1
    $.equal-to
      * 1 3

[] > array-without-complex-case
  [a] > foo
    seq > @
      a.without 0 > t
      t
  assert-that > @
    foo
      * 1 "text" "f"
    $.equal-to
      * "text" "f"

[] > array-without-nested-array
  * 3 2 1 > nested
  assert-that > @
    without.
      * "smthg" 27 nested
      2
    $.equal-to
      * "smthg" 27

[] > mapi-should-works
  assert-that > @
    mapi.
      * 1 2 3 4
      [x i]
        x.times 2 > @
    $.equal-to
      * 2 4 6 8

[] > array-at-with-error
  assert-that > @
    msg.
      at.
        * 1 2 3 4
        20
    $.is
      $.equal-to
        "Can't at() the 20th element of the array, there are just 4 of them"
